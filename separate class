"""
Author -- Oleksandr Kats
Begin date -- 17.08.2022
Data validation script can be used to check whether
Lidar and Web of rail labels were annotated correctly.
"""

# coding = utf - 8

import os
import cv2
import sys
import functools
import numpy as np
from annotation_errors import AnnotationErrors
from lookup_table_web_of_rail import LABEL_RGB_PALETTE as LABEL_RGB_PALETTE_WEB_OF_RAIL
from lookup_table_lidar_segmentation import LABEL_RGB_PALETTE as LABEL_RGB_PALETTE_LIDAR
from lookup_table_simple_for_testing import LABEL_RGB_PALETTE as LABEL_RGB_PALETTE_SIMPLE


class SinglePixelColorError:
    def __init__(self, pixel_x, pixel_y, violating_color):
        self.pixel_x = pixel_x
        self.pixel_y = pixel_y
        self.violating_color = violating_color
        self.colorError = (self.violating_color, [self.pixel_x, self.pixel_y])

    def getColorErrors(self):
        return self.colorError


class LabelValidator:
    """ This class verifies if a label was annotated correctly. In addition,
    it shows off a list of errors if they were found.
    Uses an OpenCV (https://github.com/opencv/opencv) library to work with image.
    """

    def __init__(self, path, image, height_required, length_required, amount_of_layers_required, color_map):
        # checking if the file is in image
        if os.path.splitext(str(path))[1] == ".png":
            self.path = path
            self.image = image
            self.color_map = color_map
            self.height_required = height_required
            self.length_required = length_required
            self.amount_of_layers_required = amount_of_layers_required
        else:
            raise Exception("Error! This is a bad quality .jpg photo.")

    def display_image(self):
        """ This method opens the image as a .png file.
        """
        cv2.imshow(str(self.path), self.image)
        cv2.waitKey(0)

    def validate_image_size(self):
        """ This method checks if:
        1. the image's shape is the same as required
        2. the amount of channels is the same as required.

        Returns the real size of the image.
        """
        if self.image.shape[0] != self.height_required or self.image.shape[1] != self.length_required \
                or self.image.shape[2] != self.amount_of_layers_required:
            return [AnnotationErrors.SIZE_ERROR, self.image.shape]

    def check_pixels(self):
        """ This method checks if some label pixels were annotated incorrectly.
        It returns the colors and coordinates of those pixels.
        """
        pixels_counter = 0
        pixels_wrong_colored_list = []

        # making a numpy array of picture pixels
        pixel_array = np.asarray(cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB))
        pixel_array.resize(self.image.shape[0] * self.image.shape[1], 3)

        # checking the image pixels
        for pixel in pixel_array:
            pixel_color_present = False
            for color_rgb in self.color_map:
                if functools.reduce(lambda x, y: x and y, map(lambda p, q: p == q, pixel, color_rgb), True):
                    pixel_color_present = True
                    break
            if not pixel_color_present:
                print(pixel)
                pixel_wrong_colored = SinglePixelColorError(pixels_counter // self.length_required,
                                                            pixels_counter % self.length_required,
                                                            pixel).getColorErrors()
                pixels_wrong_colored_list.append(pixel_wrong_colored)
            pixels_counter += 1

        if len(pixels_wrong_colored_list) > 0:
            return [AnnotationErrors.UNDEFINED_COLOR_ERROR, pixels_wrong_colored_list]

    def check_errors(self):
        """ This method returns a clearly visible list of image annotation errors.
        """
        errors_list = [self.validate_image_size(), self.check_pixels()]
        return errors_list


if __name__ == "__main__":
    # constant size
    height_main = 500
    length_main = 4000
    amount_of_layers = 3
    folder_name = "testLidar/"

    # dealing with the folder
    files_in_dir = os.listdir(folder_name)
    print(len(files_in_dir), "elements in folder.\n")

    for file_name in files_in_dir:
        try:
            # opening the image
            image_path = folder_name + file_name
            image_main = cv2.imread(image_path)
        except:
            raise FileNotFoundError("Could not open the file!")

        # passing the image for validation
        img = LabelValidator(image_path, image_main, height_main, length_main,
                             amount_of_layers, LABEL_RGB_PALETTE_LIDAR)
        # img.display_image()

        print("Image ", image_path, ": ", img.check_errors())
